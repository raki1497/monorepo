name: Dynamic MFT Deployment

on:
  push:
    paths:
      - 'mft/**'

jobs:
  discover-projects:
    runs-on: self-hosted
    outputs:
      projects-json: ${{ steps.find-projects.outputs.projects-json }}
      has-projects: ${{ steps.check-projects.outputs.has-projects }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Find MFT projects
        id: find-projects
        run: |
          # Find projects and output as JSON array
          projects=$(find mft -mindepth 1 -maxdepth 1 -type d -not -name ".*" | sed 's|mft/||')
          projects_json=$(echo "$projects" | jq -R -s 'split("\n") | map(select(. != ""))')
          echo "projects-json=$projects_json" >> $GITHUB_OUTPUT
          echo "Found projects: $projects_json"
          
          # List files for debugging
          for project in $(echo "$projects"); do
            echo "Files in $project:"
            find "mft/$project" -type f || echo "No files found"
          done
      
      - name: Check if projects exist
        id: check-projects
        run: |
          if [ -z "$(find mft -mindepth 1 -maxdepth 1 -type d -not -name ".*")" ]; then
            echo "has-projects=false" >> $GITHUB_OUTPUT
            echo "No projects found in mft/"
          else
            echo "has-projects=true" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: discover-projects
    if: needs.discover-projects.outputs.has-projects == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover-projects.outputs.projects-json) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Verify project files
        run: |
          echo "Deploying project: ${{ matrix.project }}"
          ls -la "mft/${{ matrix.project }}"
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Deploy project
        env:
          WLST_USER: 'weblogic'
          WLST_PASSWORD: 'weblogic1'
          MFT_SERVER: 'http://10.0.0.216:7003'
          ENV: 'Prod'
        run: |
          PROJECT_DIR="mft/${{ matrix.project }}"
          
          # Find deployment package
          ZIP_FILE=$(ls $PROJECT_DIR/mft_*_v*.zip 2>/dev/null | head -1)
          [ -z "$ZIP_FILE" ] && { echo "Error: No ZIP file found"; exit 1; }
          VERSION=$(echo "$ZIP_FILE" | grep -oE 'v[0-9]+\.[0-9]+' | cut -d'v' -f2)
          
          # Find config file
          CONFIG_FILE="$PROJECT_DIR/mft_${matrix.project}_${ENV}_config.xml"
          [ -f "$CONFIG_FILE" ] || CONFIG_FILE=$(ls $PROJECT_DIR/mft_*_config.xml 2>/dev/null | head -1)
          
          ARTIFACTS_FILE="$PROJECT_DIR/mft_${matrix.project}_artifacts.artefac"
          [ -f "$ARTIFACTS_FILE" ] || { echo "Error: Missing artifacts file"; exit 1; }

          echo "=== Deployment Details ==="
          echo "Project: ${{ matrix.project }}"
          echo "Version: $VERSION"
          echo "Config: $(basename ${CONFIG_FILE:-None})"
          echo "Artifacts: $(basename $ARTIFACTS_FILE)"
          
          python3 mft/deploy_mft.py \
            "$WLST_USER" \
            "$WLST_PASSWORD" \
            "$MFT_SERVER" \
            "${{ matrix.project }}" \
            "$VERSION" \
            "$ARTIFACTS_FILE" \
            "$ZIP_FILE" \
            "${CONFIG_FILE:-none}"

  no-projects:
    needs: discover-projects
    if: needs.discover-projects.outputs.has-projects == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No projects found
        run: echo "No MFT projects found in mft/ directory. Skipping deployment."
