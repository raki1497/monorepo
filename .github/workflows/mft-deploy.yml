name: Dynamic MFT Deployment

on:
  push:
    paths:
      - 'mft/**'

jobs:
  discover-projects:
    runs-on: self-hosted
    outputs:
      projects-json: ${{ steps.format-projects.outputs.projects-json }}
      has-projects: ${{ steps.check-projects.outputs.has-projects }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Find project directories
        id: find-projects
        run: |
          # Find projects and store in a file
          find mft -mindepth 1 -maxdepth 1 -type d -not -name ".*" -printf '%f\n' > projects.txt
          echo "Raw projects found:"
          cat projects.txt
      
      - name: Format as proper JSON array
        id: format-projects
        run: |
          # Convert to proper JSON array format
          if [ -s projects.txt ]; then
            # Use jq to create compact JSON array without extra spaces
            projects_json=$(jq -R -s -c 'split("\n") | map(select(. != ""))' projects.txt)
          else
            projects_json='[]'
          fi
          # Properly escape the JSON output
          echo "projects-json=${projects_json}" >> $GITHUB_OUTPUT
          echo "Formatted JSON: ${projects_json}"
      
      - name: Check if projects exist
        id: check-projects
        run: |
          if [ -s projects.txt ]; then
            echo "has-projects=true" >> $GITHUB_OUTPUT
          else
            echo "has-projects=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: discover-projects
    if: needs.discover-projects.outputs.has-projects == 'true'
    runs-on: self-hosted
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover-projects.outputs.projects-json) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Verify project files
        run: |
          echo "Deploying project: ${{ matrix.project }}"
          ls -la "mft/${{ matrix.project }}"
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      
      - name: Debug directory structure
        run: |
          echo "=== Current Environment ==="
          echo "Working directory: /"
          echo "Directory contents:"
          ls -la
        
          echo "=== Parent Directory ==="
          echo "Contents of $(dirname $(pwd)):"
          ls -la ..
        
          echo "=== mft/ Directory ==="
          if [ -d "mft" ]; then
            echo "Contents of mft/:"
            ls -la mft/
          else
            echo "mft/ directory not found!"
          fi
      
      - name: Deploy project
        env:
          WLST_USER: 'weblogic'
          WLST_PASSWORD: 'weblogic1'
          MFT_SERVER: 'http://10.0.0.216:7003'
          ENV: 'Prod'
          ORACLE_HOME: '/home/raki/Oracle/Middleware/Oracle_Home'  # Explicitly set ORACLE_HOME
          WLST_PATH: '/home/raki/Oracle/Middleware/Oracle_Home/wlserver/common/bin/wlst.sh'
        run: |
          # Set project variables
          PROJECT_NAME="${{ matrix.project }}"
          PROJECT_DIR="mft/${PROJECT_NAME}"
          
          # Find deployment files (with verification)
          echo "Locating deployment files in $PROJECT_DIR"
          ZIP_FILE=$(ls "$PROJECT_DIR"/mft_*_v*.zip 2>/dev/null | head -1)
          [ -z "$ZIP_FILE" ] && { echo "::error::No ZIP file found in $PROJECT_DIR"; ls -la "$PROJECT_DIR"; exit 1; }
          
          VERSION=$(echo "$ZIP_FILE" | grep -oE 'v[0-9]+\.[0-9]+' | cut -d'v' -f2)
          CONFIG_FILE="$PROJECT_DIR/mft_${PROJECT_NAME}_${ENV}_config.xml"
          [ -f "$CONFIG_FILE" ] || CONFIG_FILE=$(ls "$PROJECT_DIR"/mft_*_config.xml 2>/dev/null | head -1)
          ARTIFACTS_FILE="$PROJECT_DIR/mft_${PROJECT_NAME}_artifacts.artefac"
          [ -f "$ARTIFACTS_FILE" ] || { echo "::error::Missing artifacts file"; ls -la "$PROJECT_DIR"; exit 1; }

          echo "=== Verified Deployment Details ==="
          echo "WLST Path: $WLST_PATH"
          echo "Project: $PROJECT_NAME"
          echo "Version: $VERSION"
          echo "Config: $(basename "$CONFIG_FILE")"
          echo "Artifacts: $(basename "$ARTIFACTS_FILE")"
          
          # Execute deployment with debug output
          echo "Starting WLST deployment..."
          echo "Starting  deployment..."
          echo "Start  Python Script..."
          $WLST_PATH deploy_mft.py \
            "$WLST_USER" \
            "$WLST_PASSWORD" \
            "$MFT_SERVER" \
            "$PROJECT_NAME" \
            "$VERSION" \
            "$ARTIFACTS_FILE" \
            "$ZIP_FILE" \
            "${CONFIG_FILE:-none}"
          echo "End  Python Script..."

  no-projects:
    needs: discover-projects
    if: needs.discover-projects.outputs.has-projects == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No projects found
        run: echo "No MFT projects found in mft/ directory. Skipping deployment."
