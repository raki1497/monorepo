name: Dynamic MFT Deployment

on:
  push:
    paths:
      - 'mft/**'

jobs:
  discover-projects:
    runs-on: self-hosted
    outputs:
      projects-json: ${{ steps.format-projects.outputs.projects-json }}
      has-projects: ${{ steps.check-projects.outputs.has-projects }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Find project directories
        id: find-projects
        run: |
          # Find projects and store in a file
          find mft -mindepth 1 -maxdepth 1 -type d -not -name ".*" -printf '%f\n' > projects.txt
          echo "Raw projects found:"
          cat projects.txt
      
      - name: Format as proper JSON array
        id: format-projects
        run: |
          # Convert to proper JSON array format
          if [ -s projects.txt ]; then
            # Use jq to create compact JSON array without extra spaces
            projects_json=$(jq -R -s -c 'split("\n") | map(select(. != ""))' projects.txt)
          else
            projects_json='[]'
          fi
          # Properly escape the JSON output
          echo "projects-json=${projects_json}" >> $GITHUB_OUTPUT
          echo "Formatted JSON: ${projects_json}"
      
      - name: Check if projects exist
        id: check-projects
        run: |
          if [ -s projects.txt ]; then
            echo "has-projects=true" >> $GITHUB_OUTPUT
          else
            echo "has-projects=false" >> $GITHUB_OUTPUT
          fi

  deploy:
    needs: discover-projects
    if: needs.discover-projects.outputs.has-projects == 'true'
    runs-on: self-hosted  # Changed to self-hosted to access host paths
    strategy:
      matrix:
        project: ${{ fromJson(needs.discover-projects.outputs.projects-json) }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Verify project files
        run: |
          echo "Deploying project: ${{ matrix.project }}"
          ls -la "mft/${{ matrix.project }}"
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Debug environment
        run: |
          echo "=== Host Path Verification ==="
          echo "Checking /home/raki/Oracle existence:"
          if [ -d "/home/raki/Oracle" ]; then
            echo "Oracle Home found at /home/raki/Oracle"
            echo "Contents:"
            ls -la /home/raki/Oracle
          else
            echo "ERROR: /home/raki/Oracle not found"
            echo "Current directory: $(pwd)"
            echo "Directory contents:"
            ls -la
            echo "Mount points:"
            mount || true
          fi
          
          echo "=== WLST Path Check ==="
          WLST_PATH="/home/raki/Oracle/Middleware/Oracle_Home/wlserver/common/bin/wlst.sh"
          if [ -f "$WLST_PATH" ]; then
            echo "WLST found at $WLST_PATH"
            ls -la "$WLST_PATH"
          else
            echo "ERROR: WLST not found at $WLST_PATH"
            echo "Searching for WLST..."
            find /home/raki -name "wlst.sh" 2>/dev/null || echo "WLST not found"
          fi
      
      - name: Deploy project
        env:
          WLST_USER: 'weblogic'
          WLST_PASSWORD: 'weblogic1'
          MFT_SERVER: 'http://10.0.0.216:7003'
          ENV: 'Prod'
        run: |
          # Set local variables
          PROJECT_NAME="${{ matrix.project }}"
          PROJECT_DIR="mft/${PROJECT_NAME}"
          DEPLOY_ENV="${ENV}"
          
          # Find WLST (multiple possible locations)
          WLST_PATHS=(
            "/home/raki/Oracle/Middleware/Oracle_Home/wlserver/common/bin/wlst.sh"
            "${ORACLE_HOME}/wlserver/common/bin/wlst.sh"
            "/u01/app/oracle/middleware/wlserver/common/bin/wlst.sh"
          )
          
          for path in "${WLST_PATHS[@]}"; do
            if [ -f "$path" ]; then
              WLST_PATH="$path"
              break
            fi
          done
          
          if [ -z "$WLST_PATH" ]; then
            echo "::error::Could not locate wlst.sh"
            echo "Searched in: ${WLST_PATHS[*]}"
            exit 1
          fi
          
          echo "Using WLST at: $WLST_PATH"
          
          # Find deployment files
          ZIP_FILE=$(ls "${PROJECT_DIR}"/mft_*_v*.zip 2>/dev/null | head -1)
          [ -z "$ZIP_FILE" ] && { echo "Error: No ZIP file found"; exit 1; }
          VERSION=$(echo "$ZIP_FILE" | grep -oE 'v[0-9]+\.[0-9]+' | cut -d'v' -f2)
          
          CONFIG_FILE="${PROJECT_DIR}/mft_${PROJECT_NAME}_${DEPLOY_ENV}_config.xml"
          [ -f "$CONFIG_FILE" ] || CONFIG_FILE=$(ls "${PROJECT_DIR}"/mft_*_config.xml 2>/dev/null | head -1)
          
          ARTIFACTS_FILE="${PROJECT_DIR}/mft_${PROJECT_NAME}_artifacts.artefac"
          [ -f "$ARTIFACTS_FILE" ] || { echo "Error: Missing artifacts file"; exit 1; }

          echo "=== Deployment Details ==="
          echo "Project: ${PROJECT_NAME}"
          echo "Version: ${VERSION}"
          echo "Environment: ${DEPLOY_ENV}"
          echo "Config: $(basename "${CONFIG_FILE:-None}")"
          echo "Artifacts: $(basename "${ARTIFACTS_FILE}")"
          
          # Execute deployment using WLST
          $WLST_PATH mft/deploy_mft.py \
            "$WLST_USER" \
            "$WLST_PASSWORD" \
            "$MFT_SERVER" \
            "$PROJECT_NAME" \
            "$VERSION" \
            "$ARTIFACTS_FILE" \
            "$ZIP_FILE" \
            "${CONFIG_FILE:-none}"

  no-projects:
    needs: discover-projects
    if: needs.discover-projects.outputs.has-projects == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: No projects found
        run: echo "No MFT projects found in mft/ directory. Skipping deployment."